{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fa54877f-4163-4b97-b7b3-88d7241f1042",
   "metadata": {},
   "source": [
    "# Core Integra Talent Acquisition Performance\n",
    "\n",
    "## Project Description\n",
    "\n",
    "Core Integra offers the service of candidate selection and screening for clients through their talent acquisition team. In this project, these hiring processes funnels will be analyzed with the goal of optimizing processes such as candidate selection, average time between assignment and joining date and more. This analysis will also provide detailed Key Performance Indicators for each employee part of the Talent Acquisition team at Core Integra, which can then be used in order to track individual performance and assign goals for each employee. Lastly, this project will also explore why and how to implement better data collection processes in order to improve the accuracy of the analysis for the future."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dc7576b-7f9a-4259-b090-ef5738b2d9db",
   "metadata": {},
   "source": [
    "### 1. Loading & Exploring the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "69195b46-650f-424e-a48e-6ae03a5e74d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sr.NO</th>\n",
       "      <th>Assignment Date</th>\n",
       "      <th>Client</th>\n",
       "      <th>Position</th>\n",
       "      <th>Candidate Name</th>\n",
       "      <th>Contact No.</th>\n",
       "      <th>EmailID</th>\n",
       "      <th>Current Location</th>\n",
       "      <th>State</th>\n",
       "      <th>Qualification</th>\n",
       "      <th>...</th>\n",
       "      <th>Profile shared on</th>\n",
       "      <th>Interviwe Date</th>\n",
       "      <th>Tel / F2F Interview Date - Feedback date</th>\n",
       "      <th>Client Feedback</th>\n",
       "      <th>Documentation status</th>\n",
       "      <th>Offer Status</th>\n",
       "      <th>Joining Status</th>\n",
       "      <th>DOJ</th>\n",
       "      <th>Joining Month</th>\n",
       "      <th>Spoc Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Shiny Tavero</td>\n",
       "      <td>8879536187</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kamote</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>1/3/24</td>\n",
       "      <td>1/3/24</td>\n",
       "      <td>No Show</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Mayuri Dilip Bulunge</td>\n",
       "      <td>9561559680</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Navi Mumbai</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Anuja Prashant Nakhawa</td>\n",
       "      <td>9082610082</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Uran</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Pranali Pandharinath Padelkar</td>\n",
       "      <td>9619375762</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kharghar</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Rupali Baburao Warang</td>\n",
       "      <td>8847785920</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Navi Mumbai</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sr.NO Assignment Date Client            Position  \\\n",
       "0      1          1/2/24    TCS  TCS - Finance SPOC   \n",
       "1      2          1/2/24    TCS  TCS - Finance SPOC   \n",
       "2      3          1/2/24    TCS  TCS - Finance SPOC   \n",
       "3      4          1/2/24    TCS  TCS - Finance SPOC   \n",
       "4      5          1/2/24    TCS  TCS - Finance SPOC   \n",
       "\n",
       "                  Candidate Name Contact No. EmailID Current Location  \\\n",
       "0                   Shiny Tavero  8879536187     NaN           Kamote   \n",
       "1           Mayuri Dilip Bulunge  9561559680     NaN      Navi Mumbai   \n",
       "2         Anuja Prashant Nakhawa  9082610082     NaN             Uran   \n",
       "3  Pranali Pandharinath Padelkar  9619375762     NaN         Kharghar   \n",
       "4          Rupali Baburao Warang  8847785920     NaN      Navi Mumbai   \n",
       "\n",
       "        State  Qualification  ... Profile shared on  Interviwe Date   \\\n",
       "0  Maharashtra           NaN  ...             1/2/24          1/3/24   \n",
       "1  Maharashtra           NaN  ...             1/2/24             NaN   \n",
       "2  Maharashtra           NaN  ...             1/2/24             NaN   \n",
       "3  Maharashtra           NaN  ...             1/2/24             NaN   \n",
       "4  Maharashtra           NaN  ...             1/2/24             NaN   \n",
       "\n",
       "  Tel / F2F Interview Date - Feedback date Client Feedback  \\\n",
       "0                                   1/3/24         No Show   \n",
       "1                                      NaN             NaN   \n",
       "2                                      NaN             NaN   \n",
       "3                                      NaN             NaN   \n",
       "4                                      NaN             NaN   \n",
       "\n",
       "  Documentation status Offer Status Joining Status  DOJ Joining Month  \\\n",
       "0                  NaN          NaN            NaN  NaN           NaN   \n",
       "1                  NaN          NaN            NaN  NaN           NaN   \n",
       "2                  NaN          NaN            NaN  NaN           NaN   \n",
       "3                  NaN          NaN            NaN  NaN           NaN   \n",
       "4                  NaN          NaN            NaN  NaN           NaN   \n",
       "\n",
       "          Spoc Name  \n",
       "0  Anisha Bhaskaran  \n",
       "1  Anisha Bhaskaran  \n",
       "2  Anisha Bhaskaran  \n",
       "3  Anisha Bhaskaran  \n",
       "4  Anisha Bhaskaran  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy\n",
    "\n",
    "df=pd.read_csv(\"TCS_MIS.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1fc1c23e-d518-43fe-800a-78198f644988",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column names:\n",
      "Index(['Sr.NO', 'Assignment Date', 'Client', 'Position', 'Candidate Name',\n",
      "       'Contact No.', 'EmailID', 'Current Location', 'State ', 'Qualification',\n",
      "       'HR', 'CI HR Status', 'Additional Remark - Executive',\n",
      "       'Reference given by', 'Profile shared on ', 'Interviwe Date ',\n",
      "       'Tel / F2F Interview Date - Feedback date', 'Client Feedback',\n",
      "       'Documentation status', 'Offer Status', 'Joining Status', 'DOJ',\n",
      "       'Joining Month', 'Spoc Name'],\n",
      "      dtype='object')\n",
      "\n",
      "Data types:\n",
      "Sr.NO                                        int64\n",
      "Assignment Date                             object\n",
      "Client                                      object\n",
      "Position                                    object\n",
      "Candidate Name                              object\n",
      "Contact No.                                 object\n",
      "EmailID                                     object\n",
      "Current Location                            object\n",
      "State                                       object\n",
      "Qualification                               object\n",
      "HR                                          object\n",
      "CI HR Status                                object\n",
      "Additional Remark - Executive               object\n",
      "Reference given by                          object\n",
      "Profile shared on                           object\n",
      "Interviwe Date                              object\n",
      "Tel / F2F Interview Date - Feedback date    object\n",
      "Client Feedback                             object\n",
      "Documentation status                        object\n",
      "Offer Status                                object\n",
      "Joining Status                              object\n",
      "DOJ                                         object\n",
      "Joining Month                               object\n",
      "Spoc Name                                   object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Display column names\n",
    "print(\"Column names:\")\n",
    "print(df.columns)\n",
    "\n",
    "# Display data types of each column\n",
    "print(\"\\nData types:\")\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b3586f6f-8d07-4fbe-b3fa-f70d78bac9f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8346 entries, 0 to 8345\n",
      "Data columns (total 24 columns):\n",
      " #   Column                                    Non-Null Count  Dtype \n",
      "---  ------                                    --------------  ----- \n",
      " 0   Sr.NO                                     8346 non-null   int64 \n",
      " 1   Assignment Date                           8346 non-null   object\n",
      " 2   Client                                    8346 non-null   object\n",
      " 3   Position                                  8346 non-null   object\n",
      " 4   Candidate Name                            8346 non-null   object\n",
      " 5   Contact No.                               8346 non-null   object\n",
      " 6   EmailID                                   5117 non-null   object\n",
      " 7   Current Location                          8346 non-null   object\n",
      " 8   State                                     8346 non-null   object\n",
      " 9   Qualification                             3176 non-null   object\n",
      " 10  HR                                        8346 non-null   object\n",
      " 11  CI HR Status                              8346 non-null   object\n",
      " 12  Additional Remark - Executive             8346 non-null   object\n",
      " 13  Reference given by                        8223 non-null   object\n",
      " 14  Profile shared on                         3388 non-null   object\n",
      " 15  Interviwe Date                            1635 non-null   object\n",
      " 16  Tel / F2F Interview Date - Feedback date  1650 non-null   object\n",
      " 17  Client Feedback                           2595 non-null   object\n",
      " 18  Documentation status                      348 non-null    object\n",
      " 19  Offer Status                              315 non-null    object\n",
      " 20  Joining Status                            299 non-null    object\n",
      " 21  DOJ                                       214 non-null    object\n",
      " 22  Joining Month                             171 non-null    object\n",
      " 23  Spoc Name                                 8346 non-null   object\n",
      "dtypes: int64(1), object(23)\n",
      "memory usage: 1.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba8c63ea-5a6e-4b15-b6fc-3ff6c45394e3",
   "metadata": {},
   "source": [
    "### 2. Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "529f5ed2-061f-4683-8071-5cbf78d67aba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 7752 entries, 0 to 8345\n",
      "Data columns (total 24 columns):\n",
      " #   Column                                    Non-Null Count  Dtype \n",
      "---  ------                                    --------------  ----- \n",
      " 0   Sr.NO                                     7752 non-null   int64 \n",
      " 1   Assignment Date                           7752 non-null   object\n",
      " 2   Client                                    7752 non-null   object\n",
      " 3   Position                                  7752 non-null   object\n",
      " 4   Candidate Name                            7752 non-null   object\n",
      " 5   Contact No.                               7752 non-null   object\n",
      " 6   EmailID                                   4817 non-null   object\n",
      " 7   Current Location                          7752 non-null   object\n",
      " 8   State                                     7752 non-null   object\n",
      " 9   Qualification                             2972 non-null   object\n",
      " 10  HR                                        7752 non-null   object\n",
      " 11  CI HR Status                              7752 non-null   object\n",
      " 12  Additional Remark - Executive             7752 non-null   object\n",
      " 13  Reference given by                        7659 non-null   object\n",
      " 14  Profile shared on                         3111 non-null   object\n",
      " 15  Interviwe Date                            1478 non-null   object\n",
      " 16  Tel / F2F Interview Date - Feedback date  1492 non-null   object\n",
      " 17  Client Feedback                           2348 non-null   object\n",
      " 18  Documentation status                      310 non-null    object\n",
      " 19  Offer Status                              288 non-null    object\n",
      " 20  Joining Status                            276 non-null    object\n",
      " 21  DOJ                                       197 non-null    object\n",
      " 22  Joining Month                             155 non-null    object\n",
      " 23  Spoc Name                                 7752 non-null   object\n",
      "dtypes: int64(1), object(23)\n",
      "memory usage: 1.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df = df.drop_duplicates(subset=['Candidate Name'])\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "926b48c1-351f-4b24-9043-5937eec1bbde",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_126/3122570799.py:1: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  df['Assignment Date'] = pd.to_datetime(df['Assignment Date'], errors='coerce')\n",
      "/tmp/ipykernel_126/3122570799.py:2: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  df['DOJ'] = pd.to_datetime(df['DOJ'], errors='coerce')\n",
      "/tmp/ipykernel_126/3122570799.py:3: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  df['Interviwe Date '] = pd.to_datetime(df['Interviwe Date '], errors='coerce')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sr.NO</th>\n",
       "      <th>Assignment Date</th>\n",
       "      <th>Client</th>\n",
       "      <th>Position</th>\n",
       "      <th>Candidate Name</th>\n",
       "      <th>Contact No.</th>\n",
       "      <th>EmailID</th>\n",
       "      <th>Current Location</th>\n",
       "      <th>State</th>\n",
       "      <th>Qualification</th>\n",
       "      <th>...</th>\n",
       "      <th>Profile shared on</th>\n",
       "      <th>Interviwe Date</th>\n",
       "      <th>Tel / F2F Interview Date - Feedback date</th>\n",
       "      <th>Client Feedback</th>\n",
       "      <th>Documentation status</th>\n",
       "      <th>Offer Status</th>\n",
       "      <th>Joining Status</th>\n",
       "      <th>DOJ</th>\n",
       "      <th>Joining Month</th>\n",
       "      <th>Spoc Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Shiny Tavero</td>\n",
       "      <td>8879536187</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kamote</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>2024-01-03</td>\n",
       "      <td>1/3/24</td>\n",
       "      <td>No Show</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Mayuri Dilip Bulunge</td>\n",
       "      <td>9561559680</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Navi Mumbai</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Anuja Prashant Nakhawa</td>\n",
       "      <td>9082610082</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Uran</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Pranali Pandharinath Padelkar</td>\n",
       "      <td>9619375762</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kharghar</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Rupali Baburao Warang</td>\n",
       "      <td>8847785920</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Navi Mumbai</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1/2/24</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sr.NO Assignment Date Client            Position  \\\n",
       "0      1      2024-01-02    TCS  TCS - Finance SPOC   \n",
       "1      2      2024-01-02    TCS  TCS - Finance SPOC   \n",
       "2      3      2024-01-02    TCS  TCS - Finance SPOC   \n",
       "3      4      2024-01-02    TCS  TCS - Finance SPOC   \n",
       "4      5      2024-01-02    TCS  TCS - Finance SPOC   \n",
       "\n",
       "                  Candidate Name Contact No. EmailID Current Location  \\\n",
       "0                   Shiny Tavero  8879536187     NaN           Kamote   \n",
       "1           Mayuri Dilip Bulunge  9561559680     NaN      Navi Mumbai   \n",
       "2         Anuja Prashant Nakhawa  9082610082     NaN             Uran   \n",
       "3  Pranali Pandharinath Padelkar  9619375762     NaN         Kharghar   \n",
       "4          Rupali Baburao Warang  8847785920     NaN      Navi Mumbai   \n",
       "\n",
       "        State  Qualification  ... Profile shared on  Interviwe Date   \\\n",
       "0  Maharashtra           NaN  ...             1/2/24      2024-01-03   \n",
       "1  Maharashtra           NaN  ...             1/2/24             NaT   \n",
       "2  Maharashtra           NaN  ...             1/2/24             NaT   \n",
       "3  Maharashtra           NaN  ...             1/2/24             NaT   \n",
       "4  Maharashtra           NaN  ...             1/2/24             NaT   \n",
       "\n",
       "  Tel / F2F Interview Date - Feedback date Client Feedback  \\\n",
       "0                                   1/3/24         No Show   \n",
       "1                                      NaN             NaN   \n",
       "2                                      NaN             NaN   \n",
       "3                                      NaN             NaN   \n",
       "4                                      NaN             NaN   \n",
       "\n",
       "  Documentation status Offer Status Joining Status DOJ Joining Month  \\\n",
       "0                  NaN          NaN            NaN NaT           NaN   \n",
       "1                  NaN          NaN            NaN NaT           NaN   \n",
       "2                  NaN          NaN            NaN NaT           NaN   \n",
       "3                  NaN          NaN            NaN NaT           NaN   \n",
       "4                  NaN          NaN            NaN NaT           NaN   \n",
       "\n",
       "          Spoc Name  \n",
       "0  Anisha Bhaskaran  \n",
       "1  Anisha Bhaskaran  \n",
       "2  Anisha Bhaskaran  \n",
       "3  Anisha Bhaskaran  \n",
       "4  Anisha Bhaskaran  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Assignment Date'] = pd.to_datetime(df['Assignment Date'], errors='coerce')\n",
    "df['DOJ'] = pd.to_datetime(df['DOJ'], errors='coerce')\n",
    "df['Interviwe Date '] = pd.to_datetime(df['Interviwe Date '], errors='coerce')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9626f007-baf2-4672-81a7-373452572c11",
   "metadata": {},
   "source": [
    "### 3. Creating New Columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c1203d5-f143-4cec-8381-3f2a83e3b2d7",
   "metadata": {},
   "source": [
    "Note: In this next step, we will create dummy variables to convert text from columns into numerical values, in order to help with future analysis. For example, in this next step we will count how many rows in the 'Joining Status' column are set to 'Joined' and convert those entries into binary results (1 if Joined and 0 if not). We will do a similar trick for the other columns to understand how many candidates received offers etc. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "37c7cd84-8923-4c33-8021-f6b6c4246ee2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sr.NO</th>\n",
       "      <th>Assignment Date</th>\n",
       "      <th>Client</th>\n",
       "      <th>Position</th>\n",
       "      <th>Candidate Name</th>\n",
       "      <th>Contact No.</th>\n",
       "      <th>EmailID</th>\n",
       "      <th>Current Location</th>\n",
       "      <th>State</th>\n",
       "      <th>Qualification</th>\n",
       "      <th>...</th>\n",
       "      <th>Joining Month</th>\n",
       "      <th>Spoc Name</th>\n",
       "      <th>Joined</th>\n",
       "      <th>CI HR Interested</th>\n",
       "      <th>Client Selected</th>\n",
       "      <th>Documentation Done</th>\n",
       "      <th>Offer Done</th>\n",
       "      <th>Assignment to Joining Date</th>\n",
       "      <th>Assignment to Interview Date</th>\n",
       "      <th>Interview Date to Joining Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Shiny Tavero</td>\n",
       "      <td>8879536187</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kamote</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Mayuri Dilip Bulunge</td>\n",
       "      <td>9561559680</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Navi Mumbai</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Anuja Prashant Nakhawa</td>\n",
       "      <td>9082610082</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Uran</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Pranali Pandharinath Padelkar</td>\n",
       "      <td>9619375762</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kharghar</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>TCS - Finance SPOC</td>\n",
       "      <td>Rupali Baburao Warang</td>\n",
       "      <td>8847785920</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Navi Mumbai</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sr.NO Assignment Date Client            Position  \\\n",
       "0      1      2024-01-02    TCS  TCS - Finance SPOC   \n",
       "1      2      2024-01-02    TCS  TCS - Finance SPOC   \n",
       "2      3      2024-01-02    TCS  TCS - Finance SPOC   \n",
       "3      4      2024-01-02    TCS  TCS - Finance SPOC   \n",
       "4      5      2024-01-02    TCS  TCS - Finance SPOC   \n",
       "\n",
       "                  Candidate Name Contact No. EmailID Current Location  \\\n",
       "0                   Shiny Tavero  8879536187     NaN           Kamote   \n",
       "1           Mayuri Dilip Bulunge  9561559680     NaN      Navi Mumbai   \n",
       "2         Anuja Prashant Nakhawa  9082610082     NaN             Uran   \n",
       "3  Pranali Pandharinath Padelkar  9619375762     NaN         Kharghar   \n",
       "4          Rupali Baburao Warang  8847785920     NaN      Navi Mumbai   \n",
       "\n",
       "        State  Qualification  ... Joining Month         Spoc Name Joined  \\\n",
       "0  Maharashtra           NaN  ...           NaN  Anisha Bhaskaran      0   \n",
       "1  Maharashtra           NaN  ...           NaN  Anisha Bhaskaran      0   \n",
       "2  Maharashtra           NaN  ...           NaN  Anisha Bhaskaran      0   \n",
       "3  Maharashtra           NaN  ...           NaN  Anisha Bhaskaran      0   \n",
       "4  Maharashtra           NaN  ...           NaN  Anisha Bhaskaran      0   \n",
       "\n",
       "  CI HR Interested Client Selected Documentation Done Offer Done  \\\n",
       "0                1               0                  0          0   \n",
       "1                0               0                  0          0   \n",
       "2                0               0                  0          0   \n",
       "3                0               0                  0          0   \n",
       "4                0               0                  0          0   \n",
       "\n",
       "  Assignment to Joining Date Assignment to Interview Date  \\\n",
       "0                        NaN                          1.0   \n",
       "1                        NaN                          NaN   \n",
       "2                        NaN                          NaN   \n",
       "3                        NaN                          NaN   \n",
       "4                        NaN                          NaN   \n",
       "\n",
       "  Interview Date to Joining Date  \n",
       "0                            NaN  \n",
       "1                            NaN  \n",
       "2                            NaN  \n",
       "3                            NaN  \n",
       "4                            NaN  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2=pd.get_dummies(df['Joining Status'])\n",
    "df3=pd.get_dummies(df['CI HR Status'])\n",
    "df4=pd.get_dummies(df['Client Feedback'])\n",
    "df5=pd.get_dummies(df['Documentation status'])\n",
    "df6=pd.get_dummies(df['Offer Status'])\n",
    "\n",
    "df['Joined']=df2['Joined'].astype(int)\n",
    "df['CI HR Interested']=df3['Interested'].astype(int)\n",
    "df['Client Selected']=df4['Selected'].astype(int)\n",
    "df['Documentation Done']=df5['Done'].astype(int)\n",
    "df['Offer Done']=df6['Done '].astype(int)\n",
    "df['Assignment to Joining Date'] = (df['DOJ'] - df['Assignment Date']).dt.days\n",
    "df['Assignment to Interview Date'] = (df['Interviwe Date '] - df['Assignment Date']).dt.days\n",
    "df['Interview Date to Joining Date'] = (df['DOJ'] - df['Interviwe Date ']).dt.days\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ea39908-af85-4470-b926-534fe9672c77",
   "metadata": {},
   "source": [
    "### 4. Improving Data Quality"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "311b324e-2414-4e95-8eb5-d60e26629614",
   "metadata": {},
   "source": [
    "Note: In this next step, we want to remove the first 6 characters in the 'Position' column, as the information about the client is redundant due to the previous column (Client)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2872f96b-b8de-4b55-be4c-a9ba66701cc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sr.NO</th>\n",
       "      <th>Assignment Date</th>\n",
       "      <th>Client</th>\n",
       "      <th>Position</th>\n",
       "      <th>Candidate Name</th>\n",
       "      <th>Contact No.</th>\n",
       "      <th>EmailID</th>\n",
       "      <th>Current Location</th>\n",
       "      <th>State</th>\n",
       "      <th>Qualification</th>\n",
       "      <th>...</th>\n",
       "      <th>Joining Month</th>\n",
       "      <th>Spoc Name</th>\n",
       "      <th>Joined</th>\n",
       "      <th>CI HR Interested</th>\n",
       "      <th>Client Selected</th>\n",
       "      <th>Documentation Done</th>\n",
       "      <th>Offer Done</th>\n",
       "      <th>Assignment to Joining Date</th>\n",
       "      <th>Assignment to Interview Date</th>\n",
       "      <th>Interview Date to Joining Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>Finance SPOC</td>\n",
       "      <td>Shiny Tavero</td>\n",
       "      <td>8879536187</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kamote</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>Finance SPOC</td>\n",
       "      <td>Mayuri Dilip Bulunge</td>\n",
       "      <td>9561559680</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Navi Mumbai</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>Finance SPOC</td>\n",
       "      <td>Anuja Prashant Nakhawa</td>\n",
       "      <td>9082610082</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Uran</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>Finance SPOC</td>\n",
       "      <td>Pranali Pandharinath Padelkar</td>\n",
       "      <td>9619375762</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kharghar</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2024-01-02</td>\n",
       "      <td>TCS</td>\n",
       "      <td>Finance SPOC</td>\n",
       "      <td>Rupali Baburao Warang</td>\n",
       "      <td>8847785920</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Navi Mumbai</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anisha Bhaskaran</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sr.NO Assignment Date Client      Position                 Candidate Name  \\\n",
       "0      1      2024-01-02    TCS  Finance SPOC                   Shiny Tavero   \n",
       "1      2      2024-01-02    TCS  Finance SPOC           Mayuri Dilip Bulunge   \n",
       "2      3      2024-01-02    TCS  Finance SPOC         Anuja Prashant Nakhawa   \n",
       "3      4      2024-01-02    TCS  Finance SPOC  Pranali Pandharinath Padelkar   \n",
       "4      5      2024-01-02    TCS  Finance SPOC          Rupali Baburao Warang   \n",
       "\n",
       "  Contact No. EmailID Current Location       State  Qualification  ...  \\\n",
       "0  8879536187     NaN           Kamote  Maharashtra           NaN  ...   \n",
       "1  9561559680     NaN      Navi Mumbai  Maharashtra           NaN  ...   \n",
       "2  9082610082     NaN             Uran  Maharashtra           NaN  ...   \n",
       "3  9619375762     NaN         Kharghar  Maharashtra           NaN  ...   \n",
       "4  8847785920     NaN      Navi Mumbai  Maharashtra           NaN  ...   \n",
       "\n",
       "  Joining Month         Spoc Name Joined CI HR Interested Client Selected  \\\n",
       "0           NaN  Anisha Bhaskaran      0                1               0   \n",
       "1           NaN  Anisha Bhaskaran      0                0               0   \n",
       "2           NaN  Anisha Bhaskaran      0                0               0   \n",
       "3           NaN  Anisha Bhaskaran      0                0               0   \n",
       "4           NaN  Anisha Bhaskaran      0                0               0   \n",
       "\n",
       "  Documentation Done Offer Done Assignment to Joining Date  \\\n",
       "0                  0          0                        NaN   \n",
       "1                  0          0                        NaN   \n",
       "2                  0          0                        NaN   \n",
       "3                  0          0                        NaN   \n",
       "4                  0          0                        NaN   \n",
       "\n",
       "  Assignment to Interview Date Interview Date to Joining Date  \n",
       "0                          1.0                            NaN  \n",
       "1                          NaN                            NaN  \n",
       "2                          NaN                            NaN  \n",
       "3                          NaN                            NaN  \n",
       "4                          NaN                            NaN  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df['Position'] = df['Position'].str[6:]\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "543a38f8-5c78-41b9-a409-f2460d9c803b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Qualification\n",
       "nan                    4780\n",
       "Graduate                458\n",
       "MBA                     264\n",
       "B.COM                   253\n",
       "Bcom                    215\n",
       "B. Com                  210\n",
       "BCA                     147\n",
       "B. A.                   134\n",
       "B. Sc                   129\n",
       "BMS                      90\n",
       "BA                       85\n",
       "B.TECH                   80\n",
       "Bsc                      80\n",
       "B.SC                     71\n",
       "BBA                      63\n",
       "B.A                      56\n",
       "BE                       39\n",
       "Mcom                     37\n",
       "Btech                    35\n",
       "MCA                      32\n",
       "12th                     26\n",
       "Under Graduate           22\n",
       "Msc                      19\n",
       "M.COM                    18\n",
       "MA                       17\n",
       "MSW                      16\n",
       "B. Tech                  16\n",
       "CA                       15\n",
       "M. Com                   15\n",
       "M.A                      15\n",
       "BE / B.Tech / BTech      15\n",
       "M.SC                     13\n",
       "Army - Graduation        12\n",
       "Army - Graduate          12\n",
       "BSC                      11\n",
       "M. Sc                    10\n",
       "Diploma                   9\n",
       "HSC                       8\n",
       "M. A.                     8\n",
       "PG                        7\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Qualification'].value_counts().head(40)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "409c7005-54f3-42ec-9402-9c3b2d99b18e",
   "metadata": {},
   "source": [
    "Next, we want to clean the Qualification column better so that we can run analysis on how a qualification of a candidates affects their chances of getting hired. We will do this by creating another column - Qualification Category - which will categorize all of the entries in the Qualification column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b4c7b13c-264b-475d-9873-b8a9bc5cbac0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Qualification Category\n",
       "Blank Entry         4780\n",
       "Other               1311\n",
       "BA                   518\n",
       "BCom                 483\n",
       "BTech/BE             185\n",
       "BSc                  185\n",
       "BBA/BMS               90\n",
       "MA                    58\n",
       "MCom                  58\n",
       "MSc                   38\n",
       "12th/High School      36\n",
       "Diploma/PG            10\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Qualification']=df['Qualification'].astype(str)\n",
    "\n",
    "def classify_qualification(qualification): \n",
    "    if pd.isna(qualification) or qualification == '' or str(qualification).strip().lower() == 'nan':\n",
    "        return 'Blank Entry'\n",
    "         \n",
    "    qualification = qualification.strip().lower()  \n",
    "    \n",
    "    if 'b.com' in qualification or 'bcom' in qualification:\n",
    "        return 'BCom'\n",
    "    elif 'b.a' in qualification or 'ba' in qualification or 'bfa' in qualification or 'baf' in qualification:\n",
    "        return 'BA'\n",
    "    elif 'b.sc' in qualification or 'bsc' in qualification:\n",
    "        return 'BSc'\n",
    "    elif 'b.tech' in qualification or 'btech' in qualification or 'be' in qualification:\n",
    "        return 'BTech/BE'\n",
    "    elif 'bba' in qualification or 'bms' in qualification:\n",
    "        return 'BBA/BMS'\n",
    "    elif 'mba' in qualification:\n",
    "        return 'MBA'\n",
    "    elif 'm.com' in qualification or 'mcom' in qualification:\n",
    "        return 'MCom'\n",
    "    elif 'm.sc' in qualification or 'msc' in qualification:\n",
    "        return 'MSc'\n",
    "    elif 'm.a' in qualification or 'ma' in qualification:\n",
    "        return 'MA'\n",
    "    elif 'diploma' in qualification or 'pg' in qualification or 'post graduate' in qualification:\n",
    "        return 'Diploma/PG'\n",
    "    elif '12th' in qualification or 'hsc' in qualification or 'high school' in qualification:\n",
    "        return '12th/High School'\n",
    "    else:\n",
    "        return 'Other'\n",
    "\n",
    "df['Qualification Category'] = df['Qualification'].apply(classify_qualification)\n",
    "\n",
    "df['Qualification Category'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "accd77d2-79d6-4d71-86f3-709477939532",
   "metadata": {},
   "source": [
    "Therefore, as seen above, the Qualification Categories have been classified better, although there are still 4780 Blank Entries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6c40401-5dd9-4243-815f-501f0f74e04e",
   "metadata": {},
   "source": [
    "Next, let's look at the 'Reference given by' column and try to classify that into Reference Categories. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "051ca330-2537-4dc6-84ed-6289e116be3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Reference given by\n",
       "Naukri                                   4668\n",
       "NAUKRI                                    824\n",
       "Job Hai                                   456\n",
       "Skill Connect                             340\n",
       "Surender Diwedi                           209\n",
       "Naukri- Mass Email                        135\n",
       "Candidate Referance                       126\n",
       "Local Referance                           107\n",
       "Captain Tobby Joseph                       84\n",
       "Ex-Servicemen                              71\n",
       "Saloni                                     58\n",
       "Dhruthi                                    53\n",
       "Naukri - Mass Email                        44\n",
       "Swastik                                    38\n",
       "Tescom                                     32\n",
       "NAUKRI JP                                  32\n",
       "Client Referance - Dipti                   30\n",
       "SURENDRA                                   30\n",
       "Client Referance                           23\n",
       "HR Mecatric                                19\n",
       "Naukri JP                                  18\n",
       "Skill C2C                                  17\n",
       "Temp Pull Data                             14\n",
       "Work India                                 14\n",
       "Mukesh                                      9\n",
       "SALONI                                      9\n",
       "ex-servicemen                               9\n",
       "JOB POSTING                                 8\n",
       "TCS                                         8\n",
       "Client Referance - Aditya                   8\n",
       "Ref Candidates                              8\n",
       "KIRAN                                       7\n",
       "Anudip Foundation                           6\n",
       "Job Fair                                    6\n",
       "Prem                                        6\n",
       "WORKINDIA                                   5\n",
       "NAUKRI - MASS EMAIL                         5\n",
       "Job India                                   5\n",
       "Old Data                                    4\n",
       "DHRUTHI                                     4\n",
       "surender Diwedi                             4\n",
       "CAPTAIN TOBBY JOSEPH                        4\n",
       "Ranjit                                      4\n",
       "Namrata Vendor - Prem                       4\n",
       "Ipsita Pati - Employee Referance            3\n",
       "Ex-servicemen                               3\n",
       "DGR                                         3\n",
       "Lokesh Gupta                                3\n",
       "CLIENT REFERANCE - DIPTI                    3\n",
       "Apna Job                                    3\n",
       "Mohit Kumar                                 3\n",
       "Reference - Candidate                       3\n",
       "Client Referance - Anshika                  2\n",
       "Client Referance                            2\n",
       "Prasanth Sam                                2\n",
       "Old Data - Mass Email                       2\n",
       "Naukri - Mass email                         2\n",
       "Shweta Patil                                2\n",
       "CANDIDATE REFERANCE                         2\n",
       "Amra Ram Sai                                2\n",
       "Swati C                                     2\n",
       "Indrajeet C                                 2\n",
       "Linkedin                                    2\n",
       "Linkdin                                     2\n",
       "TCS Portal                                  2\n",
       "ex-servicemen - Air Force                   2\n",
       "Client Referance - Anvi                     2\n",
       "Candidate Referance                         2\n",
       "JOB HAI                                     2\n",
       "Own Referance                               2\n",
       "SURNDRA                                     2\n",
       "Sushil Sharma                               1\n",
       "Candidate referance                         1\n",
       "Candidate Reference                         1\n",
       "ex - serviceman - candidate referance       1\n",
       "Prem                                        1\n",
       "WORK INDIA                                  1\n",
       "JO                                          1\n",
       "NAU                                         1\n",
       "SKILL C2C                                   1\n",
       "JOB                                         1\n",
       "TESCOM                                      1\n",
       "EX SERVICEMAN                               1\n",
       "CA                                          1\n",
       "Riya Kumari                                 1\n",
       "SURE                                        1\n",
       "Vinayak                                     1\n",
       "SUDHIR C                                    1\n",
       "Mahesh Sir                                  1\n",
       "Subramanya                                  1\n",
       "Mandar Sarpole                              1\n",
       "Tushwar Watpade                             1\n",
       "SURENDER                                    1\n",
       "Candidate referance                         1\n",
       "Raju                                        1\n",
       "Anita Vendor                                1\n",
       "Shubham Patil                               1\n",
       "Nilesh                                      1\n",
       "Swapnil Wani                                1\n",
       "Nitin Katkar                                1\n",
       "Cadidate Referance                          1\n",
       "NAVI MUMBAI                                 1\n",
       "Client Referance - Niha                     1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Reference given by'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "12b7c801-dd1d-4da7-8c9c-ffef15dadb17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Reference Category\n",
       "Naukri                  5728\n",
       "Job Hai                  458\n",
       "Skill Connect            340\n",
       "Other                    335\n",
       "Surender Diwedi          243\n",
       "Candidate Reference      134\n",
       "Local Reference          107\n",
       "Captain Tobby Joseph      88\n",
       "Ex-Servicemen             86\n",
       "Client Referance          71\n",
       "Saloni                    67\n",
       "Dhruthi                   57\n",
       "Swastik                   38\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df['Reference given by'] = df['Reference given by'].str.lower()\n",
    "\n",
    "def classify_reference(ref):\n",
    "    if pd.isna(ref):  # Check for NaN values\n",
    "        return 'Other'\n",
    "    if 'naukri' in ref:\n",
    "        return 'Naukri'\n",
    "    elif 'job hai' in ref:\n",
    "        return 'Job Hai'\n",
    "    elif 'skill connect' in ref:\n",
    "        return 'Skill Connect'\n",
    "    elif 'surender diwedi' in ref or 'surendra' in ref:\n",
    "        return 'Surender Diwedi'\n",
    "    elif 'captain toby joseph' in ref or 'captain tobby joseph' in ref:\n",
    "        return 'Captain Tobby Joseph'\n",
    "    elif 'ex-servicemen' in ref or 'ex serviceman' in ref:\n",
    "        return 'Ex-Servicemen'\n",
    "    elif 'saloni' in ref:\n",
    "        return 'Saloni'\n",
    "    elif 'dhruthi' in ref or 'druthi' in ref:\n",
    "        return 'Dhruthi'\n",
    "    elif 'swastik' in ref:\n",
    "        return 'Swastik'\n",
    "    elif 'local referance' in ref or 'local reference' in ref:\n",
    "        return 'Local Reference'\n",
    "    elif 'candidate referance' in ref or 'candidate reference' in ref:\n",
    "        return 'Candidate Reference'\n",
    "    elif 'client referance' in ref or 'client reference' in ref:\n",
    "        return 'Client Referance'\n",
    "    else:\n",
    "        return 'Other'\n",
    "\n",
    "df['Reference Category'] = df['Reference given by'].apply(classify_reference)\n",
    "\n",
    "df['Reference Category'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "376951a1-8604-4c0e-8c64-a3e476b133fe",
   "metadata": {},
   "source": [
    "As you can see, the data is a lot cleaner now and better classified. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94a14c8f-47eb-448d-8a3d-d8ac6bed4c3e",
   "metadata": {},
   "source": [
    "### 5. Calculating Key Performance Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "216ab65e-92e1-4005-9b0a-a64ace0d9925",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Candidates: 7752\n",
      "Candidates Shortlisted: 2338\n",
      "Candidates Selected by TCS: 293\n",
      "Candidates Joined: 153\n",
      "Average Time to Join: 34.31 days\n"
     ]
    }
   ],
   "source": [
    "\n",
    "total_candidates = len(df)\n",
    "candidates_shortlisted = df['CI HR Interested'].sum()\n",
    "candidates_selected_by_TCS = df['Client Selected'].sum()\n",
    "candidates_joined = df['Joined'].sum()\n",
    "average_time_to_join = df['Assignment to Joining Date'].mean()\n",
    "\n",
    "print(f\"Total Candidates: {total_candidates}\")\n",
    "print(f\"Candidates Shortlisted: {candidates_shortlisted}\")\n",
    "print(f\"Candidates Selected by TCS: {candidates_selected_by_TCS}\")\n",
    "print(f\"Candidates Joined: {candidates_joined}\")\n",
    "print(f\"Average Time to Join: {average_time_to_join:.2f} days\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "543fa83b-7d21-4696-95a3-8ab16ec65c0e",
   "metadata": {},
   "source": [
    "### 6. General Analytics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f906f67f-3f93-41f4-8311-fb3c2f150f5a",
   "metadata": {},
   "source": [
    "**Qualification Analysis of those who joined**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "498265bd-fdd5-42ca-bbac-6b72311e471c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Qualification Category\n",
       "Blank Entry         162\n",
       "Other                38\n",
       "BCom                 29\n",
       "BA                   26\n",
       "BSc                  21\n",
       "BTech/BE              5\n",
       "MCom                  4\n",
       "BBA/BMS               3\n",
       "MSc                   2\n",
       "MA                    2\n",
       "12th/High School      1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df = df[df['Client Selected'] == 1]\n",
    "\n",
    "qualification_counts = filtered_df['Qualification Category'].value_counts()\n",
    "\n",
    "qualification_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "5f6c536e-cacf-4640-9187-a9a002c8dbb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "qualification_counts.plot(kind='bar', color='skyblue')\n",
    "\n",
    "plt.title('Qualification Category Distribution for Selected Candidates')\n",
    "plt.xlabel('Qualification Category')\n",
    "plt.ylabel('Candidate Count')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e6d10c6-2cea-47e1-9e55-79df6b689690",
   "metadata": {},
   "source": [
    "**Demographic Analysis**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "9de3579f-56ac-4694-b792-f49a585243d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State \n",
       "Maharashtra         127\n",
       "Uttar Pradesh        47\n",
       "Bihar                26\n",
       "Madhya Pradesh       25\n",
       "Rajasthan            12\n",
       "Delhi                10\n",
       "Telangana             8\n",
       "West Bengal           7\n",
       "Jharkhand             6\n",
       "Jammu & Kashmir       5\n",
       "Uttarakhand           5\n",
       "Andhra Pradesh        3\n",
       "Gujarat               3\n",
       "Odisha                2\n",
       "Punjab                2\n",
       "Karnataka             1\n",
       "Himachal Pradesh      1\n",
       "Tamil Nadu            1\n",
       "Haryana               1\n",
       "Assam                 1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df = df[df['Client Selected'] == 1]\n",
    "filtered_df['State '].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9584fbfa-1b37-4f4d-a665-b3d799ae73b2",
   "metadata": {},
   "source": [
    "**Positions that have Joined TCS**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "3f15831c-7882-4285-a09f-2273213d353a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Position\n",
       "OE                                 45\n",
       "VADM                               43\n",
       "DSE                                12\n",
       "SCE Thane                           8\n",
       "ASS/ATS                             7\n",
       "Regional HR                         6\n",
       "Associate                           4\n",
       "Transformation Manager              4\n",
       "Support Operations Executive        3\n",
       "Platform Tester                     3\n",
       "Admin Executive                     3\n",
       "SO                                  2\n",
       "Lead EF Resource Management         2\n",
       "CCTV Executive                      2\n",
       "SME                                 1\n",
       "Data Analyst                        1\n",
       "Telesales Executive                 1\n",
       "MIS Executive                       1\n",
       "Technical Support                   1\n",
       "Developer                           1\n",
       "Finance SPOC                        1\n",
       "ASM                                 1\n",
       "Translation Project coordinator     1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df = df[df['Joined'] == 1]\n",
    "filtered_df['Position'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de3fe13a-7ccd-4d8f-8373-c067bd5963e5",
   "metadata": {},
   "source": [
    "**Reference Category Analysis**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "3815246d-af4f-42a9-965b-85c7127e4786",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Reference Category\n",
       "Naukri                  169\n",
       "Other                    25\n",
       "Job Hai                  22\n",
       "Skill Connect            13\n",
       "Ex-Servicemen            11\n",
       "Saloni                   11\n",
       "Candidate Reference      11\n",
       "Client Referance         10\n",
       "Dhruthi                   7\n",
       "Surender Diwedi           6\n",
       "Local Reference           4\n",
       "Captain Tobby Joseph      4\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df = df[df['Client Selected'] == 1]\n",
    "reference_counts = filtered_df['Reference Category'].value_counts()\n",
    "reference_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "55c235b4-c74d-4e67-a56f-7b67646b6a61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "reference_counts.plot(kind='bar', color='skyblue')\n",
    "\n",
    "plt.title('Reference Counts for Selected Candidates')\n",
    "plt.xlabel('Reference Category')\n",
    "plt.ylabel('Candidate Count')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a81a222-1464-4cd5-95b2-4f88ffaae656",
   "metadata": {},
   "source": [
    "### 6. Core Integra Talent Acquisition Team Performance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8ecb12-6650-450d-8a5e-dde8194a87dd",
   "metadata": {},
   "source": [
    "In this section, I will be exploring different methods and techniques to analyze the data, such as data visualization tools, regression analysis, and more, to extract key insights. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "09f4f377-aec8-46ea-87be-fe34ed6a0ed6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "total_candidates = df.groupby('HR')['Candidate Name'].count()\n",
    "\n",
    "joined_candidates = df.groupby('HR')['Joined'].sum()\n",
    "\n",
    "conversion_rate = (joined_candidates / total_candidates) * 100\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "conversion_rate.sort_values(ascending=False).plot(kind='bar')\n",
    "plt.title('HR Performance: Conversion Rate')\n",
    "plt.xlabel('HR')\n",
    "plt.ylabel('Conversion Rate (%)')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7c4e918c-47aa-462e-a91a-b8d5a72504c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_candidates</th>\n",
       "      <th>total_joined</th>\n",
       "      <th>conversion_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HR</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Sandhya</th>\n",
       "      <td>1386</td>\n",
       "      <td>47</td>\n",
       "      <td>3.391053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Khushboo</th>\n",
       "      <td>1250</td>\n",
       "      <td>40</td>\n",
       "      <td>3.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hema</th>\n",
       "      <td>1649</td>\n",
       "      <td>28</td>\n",
       "      <td>1.697999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saloni</th>\n",
       "      <td>1825</td>\n",
       "      <td>28</td>\n",
       "      <td>1.534247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Siddharth</th>\n",
       "      <td>1619</td>\n",
       "      <td>10</td>\n",
       "      <td>0.617665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jessbina</th>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           total_candidates  total_joined  conversion_rate\n",
       "HR                                                        \n",
       "Sandhya                1386            47         3.391053\n",
       "Khushboo               1250            40         3.200000\n",
       "Hema                   1649            28         1.697999\n",
       "Saloni                 1825            28         1.534247\n",
       "Siddharth              1619            10         0.617665\n",
       "Jessbina                 23             0         0.000000"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hr_grouped = df.groupby('HR').agg(\n",
    "    total_candidates=('HR', 'count'),\n",
    "    total_joined=('Joined', 'sum'),\n",
    ")\n",
    "\n",
    "hr_grouped['conversion_rate'] = (hr_grouped['total_joined'] / hr_grouped['total_candidates']) * 100\n",
    "\n",
    "hr_grouped = hr_grouped.sort_values(by='conversion_rate', ascending=False)\n",
    "\n",
    "hr_grouped"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2386042-873d-4aa8-bdc4-97faf94c79f2",
   "metadata": {},
   "source": [
    "**Insight:** As seen in the above table and graph, it is clear that Sandhya has had the most number of candidates that have joined the client, and the highest conversion rate in doing so. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae22a19f-c28b-47a5-a1a2-a9b95f489ae0",
   "metadata": {},
   "source": [
    "However, we could analyze this a bit further, and try to see why these employees have such low conversion rates by exploring the entire hiring process funnel. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "41ea3bd4-1c93-4ebe-a05b-88e9a5415ed9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_candidates</th>\n",
       "      <th>screened %</th>\n",
       "      <th>total_screened</th>\n",
       "      <th>selected %</th>\n",
       "      <th>total_selected_by_TCS</th>\n",
       "      <th>joined %</th>\n",
       "      <th>total_joined</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HR</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Sandhya</th>\n",
       "      <td>1386</td>\n",
       "      <td>33.33</td>\n",
       "      <td>462</td>\n",
       "      <td>19.26</td>\n",
       "      <td>89</td>\n",
       "      <td>52.81</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Khushboo</th>\n",
       "      <td>1250</td>\n",
       "      <td>50.64</td>\n",
       "      <td>633</td>\n",
       "      <td>14.38</td>\n",
       "      <td>91</td>\n",
       "      <td>43.96</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saloni</th>\n",
       "      <td>1825</td>\n",
       "      <td>22.14</td>\n",
       "      <td>404</td>\n",
       "      <td>13.61</td>\n",
       "      <td>55</td>\n",
       "      <td>50.91</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hema</th>\n",
       "      <td>1649</td>\n",
       "      <td>21.10</td>\n",
       "      <td>348</td>\n",
       "      <td>10.34</td>\n",
       "      <td>36</td>\n",
       "      <td>77.78</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Siddharth</th>\n",
       "      <td>1619</td>\n",
       "      <td>30.14</td>\n",
       "      <td>488</td>\n",
       "      <td>4.51</td>\n",
       "      <td>22</td>\n",
       "      <td>45.45</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jessbina</th>\n",
       "      <td>23</td>\n",
       "      <td>13.04</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           total_candidates  screened %  total_screened  selected %  \\\n",
       "HR                                                                    \n",
       "Sandhya                1386       33.33             462       19.26   \n",
       "Khushboo               1250       50.64             633       14.38   \n",
       "Saloni                 1825       22.14             404       13.61   \n",
       "Hema                   1649       21.10             348       10.34   \n",
       "Siddharth              1619       30.14             488        4.51   \n",
       "Jessbina                 23       13.04               3        0.00   \n",
       "\n",
       "           total_selected_by_TCS  joined %  total_joined  \n",
       "HR                                                        \n",
       "Sandhya                       89     52.81            47  \n",
       "Khushboo                      91     43.96            40  \n",
       "Saloni                        55     50.91            28  \n",
       "Hema                          36     77.78            28  \n",
       "Siddharth                     22     45.45            10  \n",
       "Jessbina                       0       NaN             0  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hr_grouped_detailed = df.groupby('HR').agg(\n",
    "    total_candidates=('HR', 'count'),\n",
    "    total_screened=('CI HR Interested', 'sum'),\n",
    "    total_selected_by_TCS=('Client Selected', 'sum'),\n",
    "    total_joined=('Joined', 'sum'),\n",
    ")\n",
    "\n",
    "hr_grouped_detailed['screened %'] = (hr_grouped_detailed['total_screened'] / hr_grouped_detailed['total_candidates']) * 100\n",
    "hr_grouped_detailed['selected %'] = (hr_grouped_detailed['total_selected_by_TCS'] / hr_grouped_detailed['total_screened']) * 100\n",
    "hr_grouped_detailed['joined %'] = (hr_grouped_detailed['total_joined'] / hr_grouped_detailed['total_selected_by_TCS']) * 100\n",
    "\n",
    "# Round specific columns to two decimal places\n",
    "hr_grouped_detailed['screened %'] = hr_grouped_detailed['screened %'].round(2)\n",
    "hr_grouped_detailed['selected %'] = hr_grouped_detailed['selected %'].round(2)\n",
    "hr_grouped_detailed['joined %'] = hr_grouped_detailed['joined %'].round(2)\n",
    "\n",
    "# Reorder columns\n",
    "hr_grouped_detailed = hr_grouped_detailed[\n",
    "    ['total_candidates', 'screened %', 'total_screened', 'selected %', 'total_selected_by_TCS', 'joined %', 'total_joined']\n",
    "]\n",
    "\n",
    "hr_grouped_detailed.sort_values(by='total_joined', ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39d6e2b7-d9b6-40e9-a621-83152d1e997e",
   "metadata": {},
   "source": [
    "In the table above, we have calculated the numbers for the entire hiring funnel, along with their conversion rates. Screened % refers to the percentage of applicants chosen by Core Integra employees. Selected % refers to the percentage of applicants that were selected by the client (TCS) from the ones who were chosen by Core Integra employees. Joined % refers to the percentage of applicants that joined the client after being selected by the client. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87193576-49bd-41d2-bec0-7b3605b2d0ef",
   "metadata": {},
   "source": [
    "**Insight:** Here, there are some interesting points to note. Khushboo has a very high screened %, which suggests that her selection criteria for candidates might be a bit loose and could be stricter, as from the 633 candidates that Khushboo shortlists, the client has only selected 91, out of which only 40 have joined. Meanwhile, Saloni and Hema have a low screened % which suggests that they need to find better candidates, or loosen their candidate requirements. Despite having a low screened %, Saloni and Hema have a low selected % as well, which suggests that TCS is using a different selection criteria compared to Saloni and Hema. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5572dc9-9392-418a-ab46-21e69e3ab923",
   "metadata": {},
   "source": [
    "Next, I want to analyze the reason why Core Integra HR Employees rejected a candidate, in order to better understand their screening processes. Let us first look at the overall reasons for not choosing the 'Interested' option in CI HR Status column i.e. why the Core Integra HR Employee didn't shortlist the candidate. First, we will look at the 'CI HR Status' column, and then the 'Additional Remark - Executive' column in order to get a full understanding of why a client is being rejected. Then, we can look at these entries employee-wise, to understand why each employee is rejecting a candidate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7d11ce4f-d64b-476b-a187-60d168ecc575",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CI HR Status\n",
       "Interested                              2338\n",
       "Not Interested                          1937\n",
       "Not Connected                           1578\n",
       "Rejected                                 756\n",
       "Call Back                                377\n",
       "NA Undergraduate                         239\n",
       "Reconnected                              219\n",
       "Salary Issue                             140\n",
       "Location Issue                           111\n",
       "Interested But Vehicle Not Available      19\n",
       "Not interested                            17\n",
       "Call back                                 14\n",
       "Position on Hold                           2\n",
       "NA B.E. Candidate                          2\n",
       "Location issue                             2\n",
       "rejected                                   1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['CI HR Status'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5259ec9a-88a5-42ac-a0b0-f7bd275a3906",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>CI HR Status</th>\n",
       "      <th>Call Back</th>\n",
       "      <th>Call back</th>\n",
       "      <th>Location Issue</th>\n",
       "      <th>NA Undergraduate</th>\n",
       "      <th>Not Connected</th>\n",
       "      <th>Not interested</th>\n",
       "      <th>Position on Hold</th>\n",
       "      <th>Reconnected</th>\n",
       "      <th>Salary Issue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HR</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Hema</th>\n",
       "      <td>93.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>491.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jessbina</th>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Khushboo</th>\n",
       "      <td>21.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>216.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saloni</th>\n",
       "      <td>72.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>223.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sandhya</th>\n",
       "      <td>182.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>401.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Siddharth</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>247.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "CI HR Status  Call Back  Call back  Location Issue  NA Undergraduate  \\\n",
       "HR                                                                     \n",
       "Hema               93.0        0.0            46.0              16.0   \n",
       "Jessbina            9.0        0.0             1.0               0.0   \n",
       "Khushboo           21.0        0.0            12.0              96.0   \n",
       "Saloni             72.0        0.0             0.0              69.0   \n",
       "Sandhya           182.0       14.0             0.0               0.0   \n",
       "Siddharth           0.0        0.0            13.0              55.0   \n",
       "\n",
       "CI HR Status  Not Connected  Not interested  Position on Hold  Reconnected  \\\n",
       "HR                                                                           \n",
       "Hema                  491.0             0.0               2.0          0.0   \n",
       "Jessbina                0.0             0.0               0.0          0.0   \n",
       "Khushboo              216.0             0.0               0.0          0.0   \n",
       "Saloni                223.0             0.0               0.0        196.0   \n",
       "Sandhya               401.0            17.0               0.0          0.0   \n",
       "Siddharth             247.0             0.0               0.0          8.0   \n",
       "\n",
       "CI HR Status  Salary Issue  \n",
       "HR                          \n",
       "Hema                   0.0  \n",
       "Jessbina               4.0  \n",
       "Khushboo              36.0  \n",
       "Saloni                62.0  \n",
       "Sandhya               26.0  \n",
       "Siddharth             10.0  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exclude_statuses = ['Interested', 'Not Interested', 'Rejected', 'interested']\n",
    "df_filtered = df[~df['CI HR Status'].isin(exclude_statuses)]\n",
    "\n",
    "grouped = df_filtered.groupby(['HR', 'CI HR Status']).size().reset_index(name='count')\n",
    "\n",
    "top5_per_hr = grouped.groupby('HR').apply(lambda x: x.nlargest(5, 'count')).reset_index(drop=True)\n",
    "\n",
    "pivot_table = top5_per_hr.pivot(index='HR', columns='CI HR Status', values='count').fillna(0)\n",
    "\n",
    "pivot_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1dd91f0f-32e5-40ef-bb0a-c612e21d83ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Additional Remark - Executive\n",
       "Interested                              2338\n",
       "Not Responding                          1789\n",
       "Not looking for Job                      940\n",
       "No Required Skills                       678\n",
       "Currently Working                        408\n",
       "Call Back                                391\n",
       "Reason Not Shared                        234\n",
       "Undergraduate                            229\n",
       "Not looking for job                      227\n",
       "Location Issue                           113\n",
       "No Communication Skills                   76\n",
       "Exp. above 40K                            64\n",
       "Looking for Profile other than OE         58\n",
       "Not Looking for Job                       48\n",
       "Exp.31K - 40K                             34\n",
       "Not Interested for Said Role              26\n",
       "Interested But Vehicle Not Available      19\n",
       "Exp.26K - 30K                             18\n",
       "Studying                                  10\n",
       "Wrong No                                   8\n",
       "Exp.14K - 20K                              7\n",
       "Age Above 45                               7\n",
       "Looking for Desk Job                       5\n",
       "Exp.21k to 30k                             5\n",
       "Exp.21K - 25K                              5\n",
       "Age Above 50                               4\n",
       "Exp.14k - 20K                              4\n",
       "Exp. above 40k                             3\n",
       "Position on Hold                           2\n",
       "B.E. Candidate                             2\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Additional Remark - Executive'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "bf1208a0-7a30-4ea5-8883-5daa77d3609e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Additional Remark - Executive</th>\n",
       "      <th>Call Back</th>\n",
       "      <th>Currently Working</th>\n",
       "      <th>Exp. above 40K</th>\n",
       "      <th>Location Issue</th>\n",
       "      <th>Looking for Profile other than OE</th>\n",
       "      <th>No Communication Skills</th>\n",
       "      <th>No Required Skills</th>\n",
       "      <th>Not Looking for Job</th>\n",
       "      <th>Not Responding</th>\n",
       "      <th>Not looking for Job</th>\n",
       "      <th>Not looking for job</th>\n",
       "      <th>Reason Not Shared</th>\n",
       "      <th>Undergraduate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HR</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Hema</th>\n",
       "      <td>93.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>206.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>491.0</td>\n",
       "      <td>247.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jessbina</th>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Khushboo</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>220.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>96.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saloni</th>\n",
       "      <td>72.0</td>\n",
       "      <td>314.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>419.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>221.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sandhya</th>\n",
       "      <td>196.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>404.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Siddharth</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>362.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>255.0</td>\n",
       "      <td>413.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Additional Remark - Executive  Call Back  Currently Working  Exp. above 40K  \\\n",
       "HR                                                                            \n",
       "Hema                                93.0                0.0             0.0   \n",
       "Jessbina                             9.0                0.0             4.0   \n",
       "Khushboo                             0.0                0.0             0.0   \n",
       "Saloni                              72.0              314.0             0.0   \n",
       "Sandhya                            196.0                0.0             0.0   \n",
       "Siddharth                            0.0                0.0             0.0   \n",
       "\n",
       "Additional Remark - Executive  Location Issue  \\\n",
       "HR                                              \n",
       "Hema                                      0.0   \n",
       "Jessbina                                  1.0   \n",
       "Khushboo                                  0.0   \n",
       "Saloni                                    0.0   \n",
       "Sandhya                                   0.0   \n",
       "Siddharth                                13.0   \n",
       "\n",
       "Additional Remark - Executive  Looking for Profile other than OE  \\\n",
       "HR                                                                 \n",
       "Hema                                                         0.0   \n",
       "Jessbina                                                     0.0   \n",
       "Khushboo                                                    56.0   \n",
       "Saloni                                                       0.0   \n",
       "Sandhya                                                      0.0   \n",
       "Siddharth                                                    0.0   \n",
       "\n",
       "Additional Remark - Executive  No Communication Skills  No Required Skills  \\\n",
       "HR                                                                           \n",
       "Hema                                               0.0               206.0   \n",
       "Jessbina                                           0.0                 1.0   \n",
       "Khushboo                                           0.0                 0.0   \n",
       "Saloni                                             0.0                 0.0   \n",
       "Sandhya                                           54.0                60.0   \n",
       "Siddharth                                          0.0               362.0   \n",
       "\n",
       "Additional Remark - Executive  Not Looking for Job  Not Responding  \\\n",
       "HR                                                                   \n",
       "Hema                                           0.0           491.0   \n",
       "Jessbina                                       0.0             0.0   \n",
       "Khushboo                                      46.0           220.0   \n",
       "Saloni                                         0.0           419.0   \n",
       "Sandhya                                        0.0           404.0   \n",
       "Siddharth                                      0.0           255.0   \n",
       "\n",
       "Additional Remark - Executive  Not looking for Job  Not looking for job  \\\n",
       "HR                                                                        \n",
       "Hema                                         247.0                 98.0   \n",
       "Jessbina                                       5.0                  0.0   \n",
       "Khushboo                                      76.0                  0.0   \n",
       "Saloni                                        91.0                  0.0   \n",
       "Sandhya                                      108.0                  0.0   \n",
       "Siddharth                                    413.0                  0.0   \n",
       "\n",
       "Additional Remark - Executive  Reason Not Shared  Undergraduate  \n",
       "HR                                                               \n",
       "Hema                                         0.0            0.0  \n",
       "Jessbina                                     0.0            0.0  \n",
       "Khushboo                                     0.0           96.0  \n",
       "Saloni                                     221.0            0.0  \n",
       "Sandhya                                      0.0            0.0  \n",
       "Siddharth                                    0.0           55.0  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exclude_statuses = ['Interested', 'Rejected']\n",
    "df_filtered = df[~df['Additional Remark - Executive'].isin(exclude_statuses)]\n",
    "\n",
    "grouped = df_filtered.groupby(['HR', 'Additional Remark - Executive']).size().reset_index(name='count')\n",
    "\n",
    "top5_per_hr = grouped.groupby('HR').apply(lambda x: x.nlargest(5, 'count')).reset_index(drop=True)\n",
    "\n",
    "pivot_table = top5_per_hr.pivot(index='HR', columns='Additional Remark - Executive', values='count').fillna(0)\n",
    "\n",
    "pivot_table"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "395c268c-ef4c-44d4-b7a5-305dfc96a5cf",
   "metadata": {},
   "source": [
    "Next, let us look at the Client Feedback column, with relation to the HR employee who had selected the candidate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "d26252a8-9597-444c-8de6-3843534477a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Client Feedback\n",
       "No Turn up            654\n",
       "Rejected by Client    619\n",
       "No Show               483\n",
       "Selected              293\n",
       "Feedback Awaited      195\n",
       "No Requirement         65\n",
       "Closed Internally      18\n",
       "Position Closed        11\n",
       "Position on Hold        8\n",
       "position Closed         2\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Client Feedback'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebf689d5-2e7c-4653-9c45-6624e454560c",
   "metadata": {},
   "source": [
    "I would like to understand which HR employees are responsible for the high amount of candidates who have not shown up to the interview."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "56542805-feae-4c63-8344-d3409b76e46d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Client Feedback</th>\n",
       "      <th>No Show</th>\n",
       "      <th>No Turn up</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HR</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Hema</th>\n",
       "      <td>64</td>\n",
       "      <td>147</td>\n",
       "      <td>211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jessbina</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Khushboo</th>\n",
       "      <td>168</td>\n",
       "      <td>111</td>\n",
       "      <td>279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saloni</th>\n",
       "      <td>127</td>\n",
       "      <td>113</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sandhya</th>\n",
       "      <td>98</td>\n",
       "      <td>108</td>\n",
       "      <td>206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Siddharth</th>\n",
       "      <td>26</td>\n",
       "      <td>172</td>\n",
       "      <td>198</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Client Feedback  No Show  No Turn up  Total\n",
       "HR                                         \n",
       "Hema                  64         147    211\n",
       "Jessbina               0           3      3\n",
       "Khushboo             168         111    279\n",
       "Saloni               127         113    240\n",
       "Sandhya               98         108    206\n",
       "Siddharth             26         172    198"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df = df[df['Client Feedback'].isin(['No Turn up', 'No Show'])]\n",
    "\n",
    "hr_responsible = filtered_df.groupby(['HR', 'Client Feedback']).size().unstack(fill_value=0)\n",
    "\n",
    "hr_responsible['Total']=hr_responsible['No Show']+hr_responsible['No Turn up']\n",
    "\n",
    "hr_responsible"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7860153d-7a5a-49e3-b5fc-f72508408a66",
   "metadata": {},
   "source": [
    "It is clear to see that a lot of candidates, across all HR employees, are not showing up for their interviews. This could potentially harm Core Integra's standing as they are responsible for the clients, so these numbers would have to be reduced by better communication channels between the candidate, Core Integra, and TCS."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37c8d43c-b78c-4f8a-b28e-ce4e486326c3",
   "metadata": {},
   "source": [
    "Next, I want to look at the relationship between the Reference Category and No-Shows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "e671b3fe-77ac-4f0d-b0d7-50b1b6cb2650",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Client Feedback</th>\n",
       "      <th>No Show</th>\n",
       "      <th>No Turn up</th>\n",
       "      <th>Total</th>\n",
       "      <th>Total Candidates</th>\n",
       "      <th>Total Joined</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Reference Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Naukri</th>\n",
       "      <td>327</td>\n",
       "      <td>450</td>\n",
       "      <td>777</td>\n",
       "      <td>5728</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Job Hai</th>\n",
       "      <td>47</td>\n",
       "      <td>48</td>\n",
       "      <td>95</td>\n",
       "      <td>458</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other</th>\n",
       "      <td>25</td>\n",
       "      <td>35</td>\n",
       "      <td>60</td>\n",
       "      <td>335</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Skill Connect</th>\n",
       "      <td>22</td>\n",
       "      <td>19</td>\n",
       "      <td>41</td>\n",
       "      <td>340</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Candidate Reference</th>\n",
       "      <td>21</td>\n",
       "      <td>12</td>\n",
       "      <td>33</td>\n",
       "      <td>134</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Captain Tobby Joseph</th>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>33</td>\n",
       "      <td>88</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ex-Servicemen</th>\n",
       "      <td>2</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>86</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Swastik</th>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>17</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saloni</th>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>17</td>\n",
       "      <td>67</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Surender Diwedi</th>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>243</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Local Reference</th>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>13</td>\n",
       "      <td>107</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Client Referance</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>71</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dhruthi</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>57</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Client Feedback       No Show  No Turn up  Total  Total Candidates  \\\n",
       "Reference Category                                                   \n",
       "Naukri                    327         450    777              5728   \n",
       "Job Hai                    47          48     95               458   \n",
       "Other                      25          35     60               335   \n",
       "Skill Connect              22          19     41               340   \n",
       "Candidate Reference        21          12     33               134   \n",
       "Captain Tobby Joseph        0          33     33                88   \n",
       "Ex-Servicemen               2          19     21                86   \n",
       "Swastik                     9           8     17                38   \n",
       "Saloni                      5          12     17                67   \n",
       "Surender Diwedi             5          10     15               243   \n",
       "Local Reference             6           7     13               107   \n",
       "Client Referance            8           1      9                71   \n",
       "Dhruthi                     6           0      6                57   \n",
       "\n",
       "Client Feedback       Total Joined  \n",
       "Reference Category                  \n",
       "Naukri                          90  \n",
       "Job Hai                          9  \n",
       "Other                           11  \n",
       "Skill Connect                    3  \n",
       "Candidate Reference              8  \n",
       "Captain Tobby Joseph             3  \n",
       "Ex-Servicemen                    8  \n",
       "Swastik                          0  \n",
       "Saloni                           7  \n",
       "Surender Diwedi                  3  \n",
       "Local Reference                  1  \n",
       "Client Referance                 6  \n",
       "Dhruthi                          4  "
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df = df[df['Client Feedback'].isin(['No Turn up', 'No Show'])]\n",
    "\n",
    "reference_responsible = filtered_df.groupby(['Reference Category', 'Client Feedback']).size().unstack(fill_value=0)\n",
    "\n",
    "reference_responsible['Total']=reference_responsible['No Show']+reference_responsible['No Turn up']\n",
    "\n",
    "reference_responsible['Total Candidates'] = df.groupby('Reference Category')['Candidate Name'].count()\n",
    "reference_responsible['Total Joined'] = df.groupby('Reference Category')['Joined'].sum()\n",
    "\n",
    "reference_responsible.sort_values(by=\"Total\", ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6112c7e-6ae6-47f7-9df9-0d73dd5f619b",
   "metadata": {},
   "source": [
    "Next, we will investigate the total amount of days it takes for each candidate to join TCS, after being assigned to the respective HR representative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "cc91a553-0a4c-49a6-ab19-71f73708c332",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Time to Join: 34.31 days\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_126/877351825.py:5: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  averages = averages.applymap(lambda x: f\"{x:.1f}\" if isinstance(x, float) else x)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Assignment to Interview Date</th>\n",
       "      <th>Interview Date to Joining Date</th>\n",
       "      <th>Assignment to Joining Date</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HR</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Hema</th>\n",
       "      <td>8.4</td>\n",
       "      <td>22.0</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saloni</th>\n",
       "      <td>15.2</td>\n",
       "      <td>31.0</td>\n",
       "      <td>22.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Khushboo</th>\n",
       "      <td>11.2</td>\n",
       "      <td>28.2</td>\n",
       "      <td>35.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Siddharth</th>\n",
       "      <td>4.3</td>\n",
       "      <td>31.4</td>\n",
       "      <td>38.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sandhya</th>\n",
       "      <td>12.9</td>\n",
       "      <td>39.3</td>\n",
       "      <td>49.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jessbina</th>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Assignment to Interview Date Interview Date to Joining Date  \\\n",
       "HR                                                                      \n",
       "Hema                               8.4                           22.0   \n",
       "Saloni                            15.2                           31.0   \n",
       "Khushboo                          11.2                           28.2   \n",
       "Siddharth                          4.3                           31.4   \n",
       "Sandhya                           12.9                           39.3   \n",
       "Jessbina                           nan                            nan   \n",
       "\n",
       "          Assignment to Joining Date  \n",
       "HR                                    \n",
       "Hema                            20.0  \n",
       "Saloni                          22.7  \n",
       "Khushboo                        35.1  \n",
       "Siddharth                       38.6  \n",
       "Sandhya                         49.3  \n",
       "Jessbina                         nan  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df_selected = df[['HR', 'Assignment to Interview Date', 'Interview Date to Joining Date', 'Assignment to Joining Date']].copy()\n",
    "\n",
    "averages = df_selected.groupby('HR').mean()\n",
    "\n",
    "averages = averages.applymap(lambda x: f\"{x:.1f}\" if isinstance(x, float) else x)\n",
    "\n",
    "print(f\"Average Time to Join: {average_time_to_join:.2f} days\")\n",
    "\n",
    "averages.sort_values(by='Assignment to Joining Date')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9698747-2dc2-487a-8251-25e297392344",
   "metadata": {},
   "source": [
    "**Insight:** It is clear to see that Hema has the fastest Assignment to Joining time period. However, Hema does not have many candidates that have joined TCS eventually, whereas Sandhya has the most candidates that have joined. Therefore, if Sandhya could bring her average time between assignment and joining date down, then she can become more efficient and improve her conversion rate even further."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6a65210-fde8-4725-8cfe-6f9e75191775",
   "metadata": {},
   "source": [
    "Last, we can analyze how each employee is doing position-wise. Are some employees placing candidates in certain positions, while not able to place candidates in other positions? Each position has a different selection criteria, so this would be extremely important to investigate in order to improve the selection criteria."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f5a014f3-3f4c-40e0-a6f4-4b325a7cf65b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Position\n",
       "OE                                            1727\n",
       "VADM                                          1236\n",
       "Associate                                      519\n",
       "Support Operations Executive                   498\n",
       "DSE                                            490\n",
       "Transformation Manager                         341\n",
       "Regional HR                                    323\n",
       "Business Development Executive / Manager       260\n",
       "CCTV Executive                                 232\n",
       "Finance SPOC                                   225\n",
       "SCE Thane                                      195\n",
       "Sales Manager                                  127\n",
       "ASS/ATS                                        125\n",
       "SME                                            122\n",
       "ASM                                             99\n",
       "GSP Executive                                   97\n",
       "Desktop Support Engineer                        81\n",
       "AP Executive                                    80\n",
       "MIS Executive                                   77\n",
       "ESS Executive                                   60\n",
       "SO                                              60\n",
       "3D Animator                                     51\n",
       "Power Auditor                                   48\n",
       "Admin Executive                                 47\n",
       "DA Team Member                                  44\n",
       "Platform Tester                                 35\n",
       "Content Management Executive                    34\n",
       "Java Developer                                  34\n",
       "Telesales Executive                             31\n",
       "Support Executive                               30\n",
       "Translation Project coordinator                 27\n",
       "Content Editor                                  26\n",
       "Developer                                       23\n",
       "Project Manager                                 22\n",
       "VBA Developer                                   20\n",
       "Network Admin                                   19\n",
       "SME Governance                                  18\n",
       "Lead Generation Executive                       18\n",
       "SCE                                             18\n",
       "Hub Operation Manger                            17\n",
       "Functional Consultant                           17\n",
       "Lead EF Resource Management                     16\n",
       "Jr Legal Counsel                                15\n",
       "Associate SIRT                                  15\n",
       "Regional Trainer                                14\n",
       "Support Executive                               14\n",
       "Customer Support                                13\n",
       "Strategic Account                               12\n",
       "Tech Led-Network                                12\n",
       "Support Executive SMTE/Non STEM/Non Domin       11\n",
       "Python Developer                                 9\n",
       "Team Sales Manager                               9\n",
       "Data Analyst                                     8\n",
       "Analyst LP Research                              7\n",
       "Operation Executive - 2                          6\n",
       "JAVA Developer                                   6\n",
       "Mobile Application Desiganer                     4\n",
       "3D Modeler                                       4\n",
       "UI Developer                                     4\n",
       "Corporate Manage Service                         4\n",
       "Team Leader                                      3\n",
       "Technical Support                                3\n",
       "Pre-Sales Solution Consultant                    2\n",
       "Territory Manager                                2\n",
       "GSP Executive                                    2\n",
       "Support Executive SMTE                           2\n",
       "O E                                              1\n",
       "Business Analyst VE Sales                        1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Position'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "bf01ee55-0d21-4d06-9574-63a2a52c3f6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HR</th>\n",
       "      <th>Position</th>\n",
       "      <th>count</th>\n",
       "      <th>client_selected</th>\n",
       "      <th>joined</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Hema</td>\n",
       "      <td>Support Operations Executive</td>\n",
       "      <td>463</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Hema</td>\n",
       "      <td>Transformation Manager</td>\n",
       "      <td>318</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Hema</td>\n",
       "      <td>DSE</td>\n",
       "      <td>169</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Hema</td>\n",
       "      <td>VADM</td>\n",
       "      <td>167</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Hema</td>\n",
       "      <td>SCE Thane</td>\n",
       "      <td>144</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Jessbina</td>\n",
       "      <td>Transformation Manager</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Khushboo</td>\n",
       "      <td>OE</td>\n",
       "      <td>657</td>\n",
       "      <td>45</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Khushboo</td>\n",
       "      <td>VADM</td>\n",
       "      <td>309</td>\n",
       "      <td>26</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Khushboo</td>\n",
       "      <td>DSE</td>\n",
       "      <td>187</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Khushboo</td>\n",
       "      <td>Lead EF Resource Management</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Khushboo</td>\n",
       "      <td>Platform Tester</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Saloni</td>\n",
       "      <td>OE</td>\n",
       "      <td>554</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>Saloni</td>\n",
       "      <td>VADM</td>\n",
       "      <td>296</td>\n",
       "      <td>21</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Saloni</td>\n",
       "      <td>Associate</td>\n",
       "      <td>285</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Saloni</td>\n",
       "      <td>CCTV Executive</td>\n",
       "      <td>122</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Saloni</td>\n",
       "      <td>ASS/ATS</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>Sandhya</td>\n",
       "      <td>OE</td>\n",
       "      <td>456</td>\n",
       "      <td>43</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>Sandhya</td>\n",
       "      <td>VADM</td>\n",
       "      <td>392</td>\n",
       "      <td>28</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>Sandhya</td>\n",
       "      <td>Associate</td>\n",
       "      <td>139</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>Sandhya</td>\n",
       "      <td>Regional HR</td>\n",
       "      <td>124</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Sandhya</td>\n",
       "      <td>CCTV Executive</td>\n",
       "      <td>87</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>Siddharth</td>\n",
       "      <td>Business Development Executive / Manager</td>\n",
       "      <td>254</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>Siddharth</td>\n",
       "      <td>Sales Manager</td>\n",
       "      <td>127</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>Siddharth</td>\n",
       "      <td>SME</td>\n",
       "      <td>122</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>Siddharth</td>\n",
       "      <td>Finance SPOC</td>\n",
       "      <td>114</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>Siddharth</td>\n",
       "      <td>Regional HR</td>\n",
       "      <td>100</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            HR                                  Position  count  \\\n",
       "20        Hema              Support Operations Executive    463   \n",
       "24        Hema                   Transformation Manager     318   \n",
       "6         Hema                                       DSE    169   \n",
       "25        Hema                                      VADM    167   \n",
       "17        Hema                                 SCE Thane    144   \n",
       "26    Jessbina                   Transformation Manager      23   \n",
       "35    Khushboo                                        OE    657   \n",
       "43    Khushboo                                      VADM    309   \n",
       "31    Khushboo                                       DSE    187   \n",
       "32    Khushboo               Lead EF Resource Management     16   \n",
       "36    Khushboo                           Platform Tester     16   \n",
       "54      Saloni                                        OE    554   \n",
       "62      Saloni                                      VADM    296   \n",
       "46      Saloni                                 Associate    285   \n",
       "47      Saloni                            CCTV Executive    122   \n",
       "45      Saloni                                   ASS/ATS    100   \n",
       "71     Sandhya                                        OE    456   \n",
       "77     Sandhya                                      VADM    392   \n",
       "64     Sandhya                                 Associate    139   \n",
       "73     Sandhya                               Regional HR    124   \n",
       "65     Sandhya                            CCTV Executive     87   \n",
       "86   Siddharth  Business Development Executive / Manager    254   \n",
       "112  Siddharth                             Sales Manager    127   \n",
       "110  Siddharth                                       SME    122   \n",
       "95   Siddharth                              Finance SPOC    114   \n",
       "109  Siddharth                               Regional HR    100   \n",
       "\n",
       "     client_selected  joined  \n",
       "20                 4       3  \n",
       "24                 8       4  \n",
       "6                  7       7  \n",
       "25                 2       2  \n",
       "17                 8       8  \n",
       "26                 0       0  \n",
       "35                45      18  \n",
       "43                26      13  \n",
       "31                12       4  \n",
       "32                 2       2  \n",
       "36                 5       2  \n",
       "54                 6       3  \n",
       "62                21      11  \n",
       "46                 9       2  \n",
       "47                 1       0  \n",
       "45                 7       6  \n",
       "71                43      24  \n",
       "77                28      17  \n",
       "64                 3       1  \n",
       "73                 3       3  \n",
       "65                10       1  \n",
       "86                 1       0  \n",
       "112                4       0  \n",
       "110                1       1  \n",
       "95                 2       1  \n",
       "109                2       2  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped = df.groupby(['HR', 'Position']).agg(\n",
    "    count=('Position', 'size'),\n",
    "    client_selected=('Client Selected', 'sum'),\n",
    "    joined=('Joined', 'sum')\n",
    ").reset_index()\n",
    "\n",
    "# Step 2: Sort each group by count and get the top 5 positions for each HR\n",
    "grouped = grouped.sort_values(['HR', 'count'], ascending=[True, False])\n",
    "top_5_positions = grouped.groupby('HR').head(5)\n",
    "\n",
    "# Step 3: Restructure the DataFrame\n",
    "final_df = top_5_positions[['HR', 'Position', 'count', 'client_selected', 'joined']]\n",
    "\n",
    "# Display the final DataFrame\n",
    "final_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a110cc31-7b55-4f87-8f1b-6dd56201b686",
   "metadata": {},
   "source": [
    "**Insight:** There is some interesting analysis to be made here, because "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffb1d764-5798-4632-bad6-92d7e7aded80",
   "metadata": {},
   "source": [
    "### 7. Client Fulfillment Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f6d83ff-790b-4105-ba7a-3b62f9f4762f",
   "metadata": {},
   "source": [
    "In this section, I will look at some basic analysis, including analyzing the relationship between qualification and client selection, and analyze similar KPIs as written in the above section, but from the client's perspective."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00115da3-3a0f-4d1e-a38b-2b277f51922c",
   "metadata": {},
   "source": [
    "First, we will look at the main reasons for rejection of candidates from the SPOC at TCS. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "e14e8589-9573-4aab-a609-f5cf41107c7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "tcs_rejection_reasons = df.groupby('Client Feedback').size().reset_index(name='count')\n",
    "\n",
    "top_tcs_rejection_reasons = tcs_rejection_reasons.sort_values(by='count', ascending=False).head(15)\n",
    "\n",
    "plt.figure(figsize=(14, 8))\n",
    "plt.bar(top_tcs_rejection_reasons['Client Feedback'], top_tcs_rejection_reasons['count'])\n",
    "plt.title('Top Rejection Reasons for TCS Candidates')\n",
    "plt.xlabel('Rejection Reason')\n",
    "plt.ylabel('Number of Rejections')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "845c5367-7d74-4eb3-ad96-7cff9f928f44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Client Feedback</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No Turn up</td>\n",
       "      <td>654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Rejected by Client</td>\n",
       "      <td>619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>No Show</td>\n",
       "      <td>483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Selected</td>\n",
       "      <td>293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Feedback Awaited</td>\n",
       "      <td>195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>No Requirement</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Closed Internally</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Position Closed</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Position on Hold</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>position Closed</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Client Feedback  count\n",
       "4          No Turn up    654\n",
       "7  Rejected by Client    619\n",
       "3             No Show    483\n",
       "8            Selected    293\n",
       "1    Feedback Awaited    195\n",
       "2      No Requirement     65\n",
       "0   Closed Internally     18\n",
       "5     Position Closed     11\n",
       "6    Position on Hold      8\n",
       "9     position Closed      2"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_tcs_rejection_reasons"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69ab90ec-8e40-4031-b5a7-f333470e0373",
   "metadata": {},
   "source": [
    "It is clear to see that the main reason candidates are being rejected is due to no shows. There is not enough information to deduce whether this means no shows for an interview, or whether they did not turn up for something else. The stage at which they stop showing up is important to understand."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18acf0bb-b0b1-424f-a20d-4230934cf8fe",
   "metadata": {},
   "source": [
    "Next, we can understand further if there is any particular SPOC who has a high number of No Shows. This could be improved by better communication channels between the candidate, the SPOC, and the Core Integra representative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "aa8c0220-cc8e-4de0-900c-3b3f7f6abd79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Client Feedback</th>\n",
       "      <th>No Show</th>\n",
       "      <th>No Turn up</th>\n",
       "      <th>Total</th>\n",
       "      <th>Total Candidates</th>\n",
       "      <th>Total Joined</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spoc Name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Laxmi Sinha</th>\n",
       "      <td>116</td>\n",
       "      <td>89</td>\n",
       "      <td>205</td>\n",
       "      <td>917</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Renuka Vadhyar</th>\n",
       "      <td>82</td>\n",
       "      <td>43</td>\n",
       "      <td>125</td>\n",
       "      <td>794</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Himanshu Dighe</th>\n",
       "      <td>34</td>\n",
       "      <td>33</td>\n",
       "      <td>67</td>\n",
       "      <td>519</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ashok Chauhan</th>\n",
       "      <td>14</td>\n",
       "      <td>45</td>\n",
       "      <td>59</td>\n",
       "      <td>250</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ravi Kumar Pal</th>\n",
       "      <td>16</td>\n",
       "      <td>37</td>\n",
       "      <td>53</td>\n",
       "      <td>273</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Giri K</th>\n",
       "      <td>11</td>\n",
       "      <td>27</td>\n",
       "      <td>38</td>\n",
       "      <td>183</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ankita Singh</th>\n",
       "      <td>26</td>\n",
       "      <td>12</td>\n",
       "      <td>38</td>\n",
       "      <td>296</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vungarala Srikant</th>\n",
       "      <td>15</td>\n",
       "      <td>23</td>\n",
       "      <td>38</td>\n",
       "      <td>141</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riya</th>\n",
       "      <td>31</td>\n",
       "      <td>5</td>\n",
       "      <td>36</td>\n",
       "      <td>346</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Suraj Kumar</th>\n",
       "      <td>15</td>\n",
       "      <td>16</td>\n",
       "      <td>31</td>\n",
       "      <td>186</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nishant Bharadwaj</th>\n",
       "      <td>9</td>\n",
       "      <td>16</td>\n",
       "      <td>25</td>\n",
       "      <td>161</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Punit Kumar</th>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>17</td>\n",
       "      <td>102</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ritu Nanda</th>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>16</td>\n",
       "      <td>521</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sonali Kshirsagar</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "      <td>323</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jaswant Uppal</th>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>102</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nitesh Sharma</th>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>29</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mandar Kapse</th>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>133</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aditya Narse</th>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>93</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Anvi Gondhali</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>61</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shyamraj Syamalan</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>46</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kiran Kumar</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>75</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jitesh Pise</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Swapnil Wani</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Client Feedback     No Show  No Turn up  Total  Total Candidates  Total Joined\n",
       "Spoc Name                                                                     \n",
       "Laxmi Sinha             116          89    205               917            23\n",
       "Renuka Vadhyar           82          43    125               794            13\n",
       "Himanshu Dighe           34          33     67               519             4\n",
       "Ashok Chauhan            14          45     59               250            10\n",
       "Ravi Kumar Pal           16          37     53               273            12\n",
       "Giri K                   11          27     38               183             2\n",
       "Ankita Singh             26          12     38               296            13\n",
       "Vungarala Srikant        15          23     38               141             6\n",
       "Riya                     31           5     36               346             9\n",
       "Suraj Kumar              15          16     31               186             5\n",
       "Nishant Bharadwaj         9          16     25               161             9\n",
       "Punit Kumar               5          12     17               102             3\n",
       "Ritu Nanda               10           6     16               521             5\n",
       "Sonali Kshirsagar         8           6     14               323             6\n",
       "Jaswant Uppal             7           6     13               102             2\n",
       "Nitesh Sharma             4           9     13                29             5\n",
       "Mandar Kapse             11           2     13               133             3\n",
       "Aditya Narse              5           2      7                93             2\n",
       "Anvi Gondhali             3           3      6                61             3\n",
       "Shyamraj Syamalan         0           6      6                46             2\n",
       "Kiran Kumar               4           2      6                75             3\n",
       "Jitesh Pise               3           0      3                16             2\n",
       "Swapnil Wani              0           1      1                27             3"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df = df[df['Client Feedback'].isin(['No Turn up', 'No Show'])]\n",
    "\n",
    "# Group by 'Spoc Name' and count 'No Show' and 'No Turn up'\n",
    "spoc_responsible = filtered_df.groupby(['Spoc Name', 'Client Feedback']).size().unstack(fill_value=0)\n",
    "\n",
    "# Add a 'Total' column that sums the 'No Show' and 'No Turn up' counts\n",
    "spoc_responsible['Total'] = spoc_responsible['No Show'] + spoc_responsible['No Turn up']\n",
    "\n",
    "# Calculate 'Total Candidates' and 'Total Joined' based on the 'Spoc Name'\n",
    "spoc_responsible['Total Candidates'] = df.groupby('Spoc Name')['Candidate Name'].count()\n",
    "spoc_responsible['Total Joined'] = df.groupby('Spoc Name')['Joined'].sum()\n",
    "\n",
    "spoc_responsible_filtered = spoc_responsible[spoc_responsible['Total Joined'] > 1]\n",
    "\n",
    "spoc_responsible_filtered.sort_values(by=\"Total\", ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00454409-0722-495b-8a81-aec0d349695a",
   "metadata": {},
   "source": [
    "We can see that there are some SPOCs with a high number of total candidates, while maintaining a low 'No Show' rate such as Riya or Ritu Nanda. However, it is important to note that the names with the highest no-shows are also the names with the most candidates and the most candidates joined. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9342808-1a3d-4c7c-b74b-d854c485717c",
   "metadata": {},
   "source": [
    "Next, we can see the conversion rate of each SPOC to see who has the best conversion rates for joining candidates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "962653a5-e8f3-4224-842a-3756a27dba72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_candidates</th>\n",
       "      <th>total_joined</th>\n",
       "      <th>conversion_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spoc Name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Laxmi Sinha</th>\n",
       "      <td>917</td>\n",
       "      <td>23</td>\n",
       "      <td>2.508179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Renuka Vadhyar</th>\n",
       "      <td>794</td>\n",
       "      <td>13</td>\n",
       "      <td>1.637280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ankita Singh</th>\n",
       "      <td>296</td>\n",
       "      <td>13</td>\n",
       "      <td>4.391892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ravi Kumar Pal</th>\n",
       "      <td>273</td>\n",
       "      <td>12</td>\n",
       "      <td>4.395604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ashok Chauhan</th>\n",
       "      <td>250</td>\n",
       "      <td>10</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riya</th>\n",
       "      <td>346</td>\n",
       "      <td>9</td>\n",
       "      <td>2.601156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nishant Bharadwaj</th>\n",
       "      <td>161</td>\n",
       "      <td>9</td>\n",
       "      <td>5.590062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sonali Kshirsagar</th>\n",
       "      <td>323</td>\n",
       "      <td>6</td>\n",
       "      <td>1.857585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vungarala Srikant</th>\n",
       "      <td>141</td>\n",
       "      <td>6</td>\n",
       "      <td>4.255319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Suraj Kumar</th>\n",
       "      <td>186</td>\n",
       "      <td>5</td>\n",
       "      <td>2.688172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nitesh Sharma</th>\n",
       "      <td>29</td>\n",
       "      <td>5</td>\n",
       "      <td>17.241379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ritu Nanda</th>\n",
       "      <td>521</td>\n",
       "      <td>5</td>\n",
       "      <td>0.959693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Himanshu Dighe</th>\n",
       "      <td>519</td>\n",
       "      <td>4</td>\n",
       "      <td>0.770713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Swapnil Wani</th>\n",
       "      <td>27</td>\n",
       "      <td>3</td>\n",
       "      <td>11.111111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Anvi Gondhali</th>\n",
       "      <td>61</td>\n",
       "      <td>3</td>\n",
       "      <td>4.918033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kiran Kumar</th>\n",
       "      <td>75</td>\n",
       "      <td>3</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mandar Kapse</th>\n",
       "      <td>133</td>\n",
       "      <td>3</td>\n",
       "      <td>2.255639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Punit Kumar</th>\n",
       "      <td>102</td>\n",
       "      <td>3</td>\n",
       "      <td>2.941176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jitesh Pise</th>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>12.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shyamraj Syamalan</th>\n",
       "      <td>46</td>\n",
       "      <td>2</td>\n",
       "      <td>4.347826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aditya Narse</th>\n",
       "      <td>93</td>\n",
       "      <td>2</td>\n",
       "      <td>2.150538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jaswant Uppal</th>\n",
       "      <td>102</td>\n",
       "      <td>2</td>\n",
       "      <td>1.960784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Giri K</th>\n",
       "      <td>183</td>\n",
       "      <td>2</td>\n",
       "      <td>1.092896</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    total_candidates  total_joined  conversion_rate\n",
       "Spoc Name                                                          \n",
       "Laxmi Sinha                      917            23         2.508179\n",
       "Renuka Vadhyar                   794            13         1.637280\n",
       "Ankita Singh                     296            13         4.391892\n",
       "Ravi Kumar Pal                   273            12         4.395604\n",
       "Ashok Chauhan                    250            10         4.000000\n",
       "Riya                             346             9         2.601156\n",
       "Nishant Bharadwaj                161             9         5.590062\n",
       "Sonali Kshirsagar                323             6         1.857585\n",
       "Vungarala Srikant                141             6         4.255319\n",
       "Suraj Kumar                      186             5         2.688172\n",
       "Nitesh Sharma                     29             5        17.241379\n",
       "Ritu Nanda                       521             5         0.959693\n",
       "Himanshu Dighe                   519             4         0.770713\n",
       "Swapnil Wani                      27             3        11.111111\n",
       "Anvi Gondhali                     61             3         4.918033\n",
       "Kiran Kumar                       75             3         4.000000\n",
       "Mandar Kapse                     133             3         2.255639\n",
       "Punit Kumar                      102             3         2.941176\n",
       "Jitesh Pise                       16             2        12.500000\n",
       "Shyamraj Syamalan                 46             2         4.347826\n",
       "Aditya Narse                      93             2         2.150538\n",
       "Jaswant Uppal                    102             2         1.960784\n",
       "Giri K                           183             2         1.092896"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spoc_grouped = df.groupby('Spoc Name').agg(\n",
    "    total_candidates=('HR', 'count'),\n",
    "    total_joined=('Joined', 'sum'),\n",
    ")\n",
    "\n",
    "spoc_grouped['conversion_rate'] = (spoc_grouped['total_joined'] / spoc_grouped['total_candidates']) * 100\n",
    "\n",
    "spoc_grouped = spoc_grouped.sort_values(by='conversion_rate', ascending=False)\n",
    "\n",
    "spoc_filtered = spoc_grouped[spoc_grouped['total_joined']>1]\n",
    "\n",
    "spoc_filtered.sort_values(by=\"total_joined\", ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "437c28e6-003b-4737-a366-bd64795e98b4",
   "metadata": {},
   "source": [
    "### 8. Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39083ac4-53f0-405b-bd76-26fda5137636",
   "metadata": {},
   "source": [
    "While there are a lot of improvements that could be made from a data collection, accuracy, and normalization perspective, there are still a lot of interesting analyses that can be derived from the existing dataset. In this project, I have structured the dataset in a more organized way in order to conduct more accurate analysis by creating new columns and changing existing ones. I have analyzed the Core Integra Talent Acquisition Team Performance as well as the Client Fulfillment, and this analysis will be used to make a dashboard in order to better track KPIs for the team and set goals for better conversion rates and performance."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-2024.02-py310",
   "language": "python",
   "name": "conda-env-anaconda-2024.02-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
